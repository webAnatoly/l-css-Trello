.container {
  max-width: 120rem;
  margin: 8rem auto;
  background-color: var(--color-grey-light-1);
  box-shadow: var(--shadow-dark);

  min-height: 30rem;

  @media only screen and (max-width: $bp-largest) {
    margin: 0;
    max-width: 100%;
    width: 100%;
  }
}

.header {
  font-size: 1.4rem;
  height: 7rem;
  background-color: #fff;
  border-bottom: var(--line);

  display: flex;
  justify-content: space-between;
  align-items: center;

  @media only screen and (max-width: $bp-smallest) {
    flex-wrap: wrap; // что-бы строка поиска переносилась в низ на маленьких экранах
    height: 11rem;
    align-content: space-around; // распределить ряды по оси cross axis
  }
}

.content {
  display: flex;

  // левый сайдбар превращаем в горизонтальный
  @media only screen and (max-width: $bp-medium) {
    flex-direction: column;
  }
}

.sidebar {
  background-color:  var(--color-grey-dark-1);

  flex: 0 0 18%; // flex is shorthand for flex-grow, flex-shrink, flex-basis. Defaults values is "flex: 0 1 auto;"
                
                 /* flex-grow: 0 - don't allow the element to grow if there's some space
                    flex-shrink: 0 - don't allow the element to shrink if there's not enough space
                    flex-basis: 18% - always keep width 18% */

  // вертикальное позиционирование блоков .side-nav и .legal внутри .sidebar
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.hotel-view {
  background-color: #fff;
  min-height: 80rem;

  flex: 1; // this equal flex: 1 1 auto;
           // flex-grow: 1 means to allow the element to grow if there's some free space (to fill all free space).
}

.detail {
  font-size: 1.4rem;
  display: flex;
  padding: 4.5rem;
  background-color: var(--color-grey-light-1);
  border-bottom: 1px solid var(--line);

  @media only screen and (max-width: $bp-medium) {
    padding: 3rem;
  }

  @media only screen and (max-width: $bp-small) {
    flex-direction: column;
  }
}

.description {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  flex: 0 0 60%; // [Длинный коммент в одну строку] it's like "flex-grow: 0, flex-shrink: 0, flex-basis: 60%" Секция не будет увеличиваться/уменьшаться за счет flex-grow/flex-shrink, потому что им заданы значения 0, но она будет меняться за счет flex-basis, потому что его значение задано в процентах 60%.
  margin-right: 4.5rem; // чтобы было одинаково с padding для .detail 4.5rem

  @media only screen and (max-width: $bp-medium) {
    padding: 3rem;
    margin-right: 3rem; // чтобы было одинаково с padding для .detail 3rem
  }

  @media only screen and (max-width: $bp-small) {
    margin-right: 0;
    margin-bottom: 3rem;
  }
}

.user-reviews {
  flex: 1; // занять оставшеюся свободную ширину. "flex: 1" === "flex-grow: 1, flex-shrink: 1, flex-basis: auto"
  
  // задаем направление flex осям и позиционируем блоки (и кнопка там) по центру вдоль оси cross axis
  display: flex;
  flex-direction: column;
  align-items: center;
}